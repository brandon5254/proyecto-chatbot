from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

FAQ = {
    "hola": "Â¡Hola! Â¿En quÃ© puedo ayudarte?",
    "quÃ© servicios ofrecen?": "Ofrecemos cursos, asesorÃ­as y talleres acadÃ©micos.",
    "Â¿cÃ³mo me inscribo?": "Puedes inscribirte en nuestra web o escribiÃ©ndonos por aquÃ­.",
    "Â¿cuÃ¡nto cuesta?": "Tenemos precios variados segÃºn el curso. EscrÃ­benos para mÃ¡s detalles.",
    "gracias": "Â¡Con gusto! ğŸ˜Š",
    "adiÃ³s": "Â¡Hasta luego! ğŸ‘‹",
    "Â¿dÃ³nde estÃ¡n ubicados?": "Estamos en Cali, Colombia. TambiÃ©n atendemos en lÃ­nea.",
    "Â¿quiÃ©nes son?": "Somos una plataforma de apoyo acadÃ©mico.",
    "Â¿quÃ© horarios manejan?": "De lunes a viernes, 8:00 a.m. a 6:00 p.m.",
    "Â¿puedo agendar una cita?": "Â¡Claro! DÃ©janos tus datos y te contactamos."
}

corpus = list(FAQ.keys())
vectorizer = TfidfVectorizer().fit(corpus)
X = vectorizer.transform(corpus)

def obtener_respuesta(mensaje_usuario, umbral=0.4):
    vector_usuario = vectorizer.transform([mensaje_usuario])
    similitudes = cosine_similarity(vector_usuario, X)[0]

    idx_max = similitudes.argmax()
    score_max = similitudes[idx_max]

    if score_max >= umbral:
        pregunta_similar = corpus[idx_max]
        return FAQ[pregunta_similar]
    return None
